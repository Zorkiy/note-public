#!/usr/bin/env bash

# ==============================================================================
#
#          FILE: create_note.sh
#
#         USAGE: ./create_note.sh
#
#   DESCRIPTION: Створює новий файл нотатки у форматі Markdown з попередньо
#                визначеним шаблоном, що містить поточну дату, URL-адресу
#                на GitHub та інші поля. Після створення файл відкривається
#                у текстовому редакторі, заданому змінною оточення.
#
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Your Name <your.email@example.com>
#  ORGANIZATION:
#       CREATED: 2025-09-02
#      REVISION: 1.0
#
# ==============================================================================

# Зупиняти виконання скрипту при будь-якій помилці
# -e: вийти негайно, якщо команда завершується з ненульовим статусом.
# -u: вважати помилкою використання неініціалізованих змінних.
# -o pipefail: статус виходу конвеєра (|) буде статусом останньої команди,
#              що завершилась з помилкою, або нульовим, якщо всі успішні.
set -euo pipefail

# --- КОНФІГУРАЦІЯ ---

# Директорія для зберігання нотаток.
# Використовується змінна $HOME для сумісності з різними системами.
readonly NOTES_DIR="${HOME}/note-public"

# Базова URL-адреса репозиторію для генерації посилань.
readonly GITHUB_REPO_URL="https://github.com/Zorkiy/note-public/blob/main"

# Визначення редактора. Пріоритет: $CODE_EDITOR, потім $VISUAL,
# і в останню чергу 'vi' як стандартний варіант.
readonly EDITOR="${CODE_EDITOR:-${VISUAL:-vi}}"

# --- ОСНОВНА ЛОГІКА ---

# Створення директорії, якщо вона не існує.
# Ключ '-p' запобігає помилці, якщо директорія вже існує.
mkdir -p "${NOTES_DIR}"

# Генерація мітки часу у форматі ISO 8601 (YYYY-MM-DD_HH-MM-SS).
# Такий формат є стандартом і дозволяє коректно сортувати файли за іменем.
timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
file_name="${timestamp}.md"
file_path="${NOTES_DIR}/${file_name}"

# Створення файлу та запис шаблону за допомогою "here document" (cat << EOF).
# Це набагато ефективніше, ніж викликати 'echo' для кожного рядка окремо,
# оскільки створюється лише один процес 'cat' замість багатьох.
cat > "${file_path}" << EOF
# 

* **URL:** ${GITHUB_REPO_URL}/${file_name}
* **AI URL:** 

EOF

# Якщо існує файл з функціями, підключаємо його.
# Це робить скрипт більш гнучким і не вимагає обов'язкової наявності цього файлу.
if [[ -f "${DIR_SCRIPTS}/functions.sh" ]]; then
    # shellcheck source=/dev/null
    . "${DIR_SCRIPTS}/functions.sh"
fi

# Відкриття створеного файлу у визначеному редакторі.
"${EDITOR}" "${file_path}"

# Повідомлення про успішне створення файлу.
echo "Нотатку успішно створено: ${file_path}"
